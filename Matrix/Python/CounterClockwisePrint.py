# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c4ELojr5RJIgfRft7MhpjXDLvmoQLe-A
"""

R = 4
C = 4
  
# Function to print the required traversal 
def counterClockspiralPrint(m, n, matrix) : 
    k = 0; l = 0
      
    # k - starting row index 
    # m - ending row index 
    # l - starting column index 
    # n - ending column index 
    # i - iterator  
  
    # initialize the count 
    count = 0
  
    # total number of elements in matrix 
    total = m * n 
  
    while (k < m and l < n) : 
        if (count == total) : 
            break
  
        # Print the first column from the remaining columns  
        for i in range(k, m) : 
            print(matrix[i][l], end = " ") 
            count += 1
          
        l += 1
  
        if (count == total) : 
            break
  
        # Print the last row from the remaining rows  
        for i in range (l, n) : 
            print( matrix[m - 1][i], end = " ") 
            count += 1
          
        m -= 1
          
        if (count == total) : 
            break
  
        # Print the last column from the remaining columns  
        if (k < m) : 
            for i in range(m - 1, k - 1, -1) : 
                print(matrix[i][n - 1], end = " ") 
                count += 1
            n -= 1
  
        if (count == total) : 
            break
  
        # Print the first row from the remaining rows  
        if (l < n) : 
            for i in range(n - 1, l - 1, -1) : 
                print( matrix[k][i], end = " ") 
                count += 1
                  
            k += 1
              
  
 
matrix = [ [ 1, 2, 3, 4 ], 
        [ 5, 6, 7, 8 ], 
        [ 9, 10, 11, 12 ], 
        [ 13, 14, 15, 16 ] ] 
          
counterClockspiralPrint(R, C, matrix)

