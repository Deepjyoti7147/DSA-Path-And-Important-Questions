# -*- coding: utf-8 -*-
"""MergeSortDLL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_grUIQCrE1pDXGU269ekUeDKKRlbQdPy
"""

#A node of a double linked list
class Node: 
  def __init__(self,data): 
    self.data=data
    self.next=None
    self.previous=None

class DoubleLinkedList:
  def __init__(self): 
    self.start=None

#function to merge double linked list 
  def merge(self,a,b):
    #If first list is empty
    if (a==None): 
      return b
    #If second list is empty 
    if (b==None): 
      return a
    if (a.data < b.data): 
      a.next=self.merge(a.next,b)
      a.next.previous=a
      a.previous=None
      return a
    else: 
      b.next=self.merge(a,b.next)
      (b.next).previous=b
      b.previous=None
      return b

  #Function to perform MergeSort
  def mergesort(self,head): 
    if (head==None): 
      return head 
    if (head.next==None): 
      return head
    b = self.div(head)
    head = self.mergesort(head) 
    b = self.mergesort(b)
    return self.merge(head,b) 
 
 #Function to divide double linked list into smaller linked list
  def div(self,head): 
    first=last=head 
    while(True): 
      if (first.next==None): 
        break
      if ((first.next).next==None): 
        break
      first=(first.next).next
      last=last.next
      
    temp=last.next
    last.next=None
    return temp
     
  def insert(self,d):  
    n=Node(d)
    n.next=self.start
 
    if (self.start!=None): 
      self.start.previous=n 
    self.start=n
  
  def display(self,node):  
    temp=node
    while(node!=None): 
      print (node.data)
      temp=node
      node=node.next
dll=DoubleLinkedList()
inp=int(input("Enter the number of nodes "))
for i in range(inp):
        j=int(input("Enter the data of the node "))
        dll.insert(j)
dll.start=dll.mergesort(dll.start) 
print ("\nDisplaying the double linked list after merge sort ")
dll.display(dll.start)